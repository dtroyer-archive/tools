#!/bin/bash
# config-template - Config script template
# $Id: config-template 389 2008-04-28 17:46:31Z troyerdl $

PROG=`basename $0`
DIR=`dirname $0`
USAGE_TEXT="
$PROG - Configure template
$PROG [-h] [-V]
-V      Verify configuration changes

script changes:
- do something useful
"

DEF_FILE=/tmp/qaz
DEF_MODE=644
DEF_OWNER=root:root

#=============================
# Boilerplate functions
SAVE_EXT=orig-config

# save_orig_file makes a copy of the original file if it doesn't exist
# save_orig_file filename
save_orig_file() {
    if [ ! -e $1.$SAVE_EXT ]; then
        /bin/cp -p $1 $1.$SAVE_EXT
    fi
}

# set_file owner mode filename [filename ...]
set_file() {
    OWNER=$1; shift
    MODE=$1; shift
    FILE="$@"

    for i in $FILE; do
        if [ ! -e $i ]; then
            /bin/touch $i
        fi
    done

    /bin/chown $OWNER $FILE
    /bin/chmod $MODE $FILE
}

# test_file owner mode filename
# Returns: 1=file not found, 2=wrong permissions
test_file() {
    RET=0
    OWNER=$1; shift
    MODE=$1; shift
    FILE=$1

    if [ ! -e $FILE ]; then
        echo "$FILE not present"
        RET=1
    else
        X=`stat -c "%a %U %G" $1`
        set $X
        if [ $1 != $MODE ]; then
            echo "$FILE mode is $1, should be $MODE"
            RET=2
        fi
        if [ "$2:$3" != $OWNER ]; then
            echo "$FILE owner is $2:$3, should be $OWNER"
            RET=2
        fi
    fi
    return $RET
}

# test_value actual expected msg
test_value() {
    RET=0
    if [ "$1" != "$2" ]; then
        RET=1
        echo "$3: $1 != $2"
    fi
    return $RET
}
#=============================

# Make the actual changes
make_change() {
    TMP_FILE=$DEF_FILE.tmp$$

    save_orig_file $DEF_FILE
    /bin/sed -e "
        /qaz/s|qaz|quux|
    " $DEF_FILE >$TMP_FILE
    [ $? = 0 ] && /bin/mv $TMP_FILE $DEF_FILE
    set_file $DEF_OWNER $DEF_MODE $DEF_FILE
}

# Test for changes
test_config() {
    RET=0

    test_file $DEF_OWNER $DEF_MODE $DEF_FILE
    [ $? != 0 ] && RET=1

    return $RET
}

usage() {
    echo $USAGE_TEXT
}

# Main processing

VERIFY=0
while getopts hV c; do
    case $c in
        h)      usage;
                exit;
                ;;
    	V)	VERIFY=1
        	;;
    esac
done
shift `expr $OPTIND - 1`

# Verify running as root
if [ "$EUID" != 0 ]; then
    echo "Must be root to run $PROG"
    exit 1
fi

# Skip changes if this is a Verify run
if [ "$VERIFY" != 1 ]; then
    make_change
fi

test_config
exit $?
